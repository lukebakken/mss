#!/usr/bin/env bash

set -o errexit
set -o nounset

declare -r debug="${MSS_DEBUG:-false}"
declare -r mss_preserve="${MSS_PRESERVE:-false}"

if [[ $debug == 'true' ]]
then
    cv='-vvv'
else
    cv='-s'
fi

declare -r tmpfile_file="/tmp/mss-test.$$.tmpfiles"

function make_temp_file
{
    local template="${1:-mss_test.$$.XXXXXX}"
    if [[ $template != *XXXXXX ]]
    then
        template="$template.XXXXXX"
    fi
    local tmp=$(mktemp -t "$template")
    echo "$tmp" >> "$tmpfile_file"
    echo "$tmp"
}

function now
{
    date '+%Y-%m-%d %H:%M:%S'
}

function pwarn
{
    echo "$(now) [warning]: $@" 1>&2
}

function perr
{
    echo "$(now) [error]: $@" 1>&2
}

function pinfo
{
    echo "$(now) [info]: $@"
}

function pdebug
{
    if [[ $debug == 'true' ]]
    then
        echo "$(now) [debug]: $@"
    fi
}

function errexit
{
    perr "$@"
    exit 1
}

function onexit
{
    if [[ -f $tmpfile_file ]]
    then
        for tmpfile in $(< $tmpfile_file)
        do
            pdebug "removing temp file $tmpfile"
            rm -f $tmpfile
        done
        rm -f $tmpfile_file
    fi
}

trap onexit EXIT

function run_test
{
    local test_name="$1"
    local -r test_id="$2"
    local method="$3"
    local -i want_code="$4"
    local want_content="${5:-}"
    local data_file="${6:-}"

    if [[ $test_id == localhost:7777* ]]
    then
        local url_arg="$test_id"
    else
        local url_arg="localhost:7777/store/$test_id"
    fi

    local test_ccf="$(make_temp_file)"
    local test_cout="$(make_temp_file)"
    local test_cerr="$(make_temp_file)"

    if [[ $method == 'GET' ]]
    then
        curl -4 $cv -o "$test_ccf" -w '%{http_code}' "$url_arg" 1> "$test_cout" 2> "$test_cerr"
    elif [[ $method == 'DELETE' ]]
    then
        curl -4 $cv -o "$test_ccf" -w '%{http_code}' -XDELETE "$url_arg" 1> "$test_cout" 2> "$test_cerr"
    else
        if [[ -s "$data_file" ]]
        then
            curl -4 $cv -o "$test_ccf" -w '%{http_code}' -X$method -H 'Content-Type: text/plain' "$url_arg" -d "@$data_file" 1> "$test_cout" 2> "$test_cerr"
        else
            curl -4 $cv -o "$test_ccf" -w '%{http_code}' -X$method -H 'Content-Type: text/plain' "$url_arg" 1> "$test_cout" 2> "$test_cerr"
        fi
    fi

    local -i test_curl_rslt="$(< $test_cout)"
    if (( test_curl_rslt != $want_code ))
    then
        errexit "$test_name, got $test_curl_rslt, want $want_code"
    fi

    local test_content="$(< $test_ccf)"
    if [[ $test_content != $want_content ]]
    then
        errexit "$test_name, got '$test_content', want '$want_content'"
    fi
}

function make_data_file
{
    local data_file="$(make_temp_file)"
    openssl rand -hex -out "$data_file" 5242880
    echo "$data_file"
}

function success_exit
{
    pinfo SUCCESS
    exit 0
}

# TEST
# generic-handler
run_test 'generic-handler' 'localhost:7777' 'GET' 200 'MSS'

declare -ri id="$(date '+%s')"
pinfo "id: $id"

data_file="$(make_data_file)"
pinfo "data file: $(ls -l $data_file)"

# TEST
# put-data-empty
run_test 'put-data-empty' "$id" 'PUT' 400 'error|missing body'

# TEST
# put-data
want_content="error|blob with ID '$id' does not yet exist, use POST to create."
run_test 'put-data' "$id" 'PUT' 400 "$want_content" "$data_file"

# TEST
# post-data
run_test 'post-data' "$id" 'POST' 201 '' "$data_file"

# TEST
# re-post-data
want_content="error|blob with ID '$id' exists, use PUT to update."
run_test 're-post-data' "$id" 'POST' 400 "$want_content" "$data_file"

data_file="$(make_data_file)"

# TEST
# put-data-update
run_test 'put-data-update' "$id" 'PUT' 204 '' "$data_file"

# TEST
# get-data
run_test 'get-data' "$id" 'GET' 200 "$(< $data_file)"

if [[ $mss_preserve == 'true' ]]
then
    pinfo 'preserved data files'
    success_exit
fi

# TEST
# delete-data
run_test 'delete-data' "$id" 'DELETE' 204 ''

# TEST
# delete-data-notfound
run_test 'delete-data-notfound' $id 'DELETE' 404

success_exit
